const crypto = require('crypto');
const uuid = require('node-uuid');
module.exports = class Cryptor
{
    constructor(algor = null)
    {
        this._algor = algor || 'aes-256-ctr';
    }

    encry(buffer,password = null)
    {
        let isBuffer = buffer instanceof Buffer;
        password = password || uuid.v4();
        const cipher = crypto.createCipher(this._algor,password);
        const readyBuffer = isBuffer? buffer:Buffer.from(buffer,'utf8');
        const encrpted = Buffer.concat([cipher.update(readyBuffer),cipher.final()]);
        return new CryptoData(isBuffer? encrpted:encrpted.toString('base64'),password);
    }

    decry(buffer,password = null)
    {
        let inputPwd;
        let inputBuffer;
        if(buffer instanceof CryptoData)
        {
            inputPwd =  buffer.password;
            inputBuffer = buffer.data;
        }
        else
        {
            inputPwd = password;
            inputBuffer = buffer;
        }

        if(!inputPwd)
        {
            throw new Error('password undefine.');
        }

        let isBuffer = inputBuffer instanceof Buffer;
        const readyBuffer = isBuffer? inputBuffer:Buffer.from(inputBuffer,'base64');
        const decipher = crypto.createDecipher(this._algor,inputPwd);
        const decrted = Buffer.concat([decipher.update(readyBuffer),decipher.final()]);
        return new CryptoData(isBuffer? decrted : decrted.toString('utf8'),inputPwd);
    }
}

class CryptoData
{
    constructor(data,password)
    {
        this._data = data;
        this._password = password;
    }

    get password()
    {
        return this._password;
    }

    get data()
    {
        return this._data;
    }
}